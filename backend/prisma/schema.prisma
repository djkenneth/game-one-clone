// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile?
  addresses Address[]

  @@map("users")
}

model Profile {
  id             Int      @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  birthDate      DateTime
  age            Int
  profilePicture String?
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("profile")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id           Int        @id @default(autoincrement())
  slug         String?    @unique
  title        String
  price        Int
  availability Boolean
  image        String
  description  String     @db.LongText
  sku          String     @unique
  url          String
  tags         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  categories   Category[] @relation("ProductCategories")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String?   @unique
  products Product[] @relation("ProductCategories")
}

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   articles   Article[]
// }

// model Article {
//   id        Int      @id @default(autoincrement())
//   title     String   @db.VarChar(255)
//   body      String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
